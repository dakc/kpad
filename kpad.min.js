/*!
 * kpad v1.0.0 (https://github.com/dakc/kpad)
 * Copyright (c) 2020 DA KC
 * MIT License (https://raw.githubusercontent.com/dakc/kpad/master/LICENSE)
 */
var kpad = function () {
  function t(t, e) {
    this._pEl = t, this._config = e, this._lineCap = "round", this.createCanvas()
  }
  var e = t.prototype;
  return e.init = function () {
    this._penColor = "color" in this._config && this._config.color || "rgba(255,0,0,1)", this._brushSize = "size" in this._config && this._config.size || 1, this._config.backgroundColor = "backgroundColor" in this._config && this._config.backgroundColor || "#ffffff", this._brushSizeIncreement = "sizeIncreement" in this._config && this._config.sizeIncreement || 2, this._drawFlag = !1, this._startPoint = {
      x: 0,
      y: 0
    }, this.resizeCanvas()
  }, e.createCanvas = function () {
    var t = document.createElement("canvas");
    if (this._pEl.append(t), this._context = t.getContext("2d"), !this._context) throw new Error("canvas is not supported on your browser!");
    var e = t.getBoundingClientRect();
    this._cEl = t, this._rect = e;
    var n = this;
    window.addEventListener("load", function () {
      n.init.call(n), t.addEventListener("mousedown", n.drawStart.bind(n)), t.addEventListener("mousemove", n.drawContinue.bind(n)), t.addEventListener("mouseup", n.drawStop.bind(n)), t.addEventListener("touchstart", n.drawStart.bind(n)), t.addEventListener("touchmove", n.drawContinue.bind(n)), t.addEventListener("touchend", n.drawStop.bind(n)), window.addEventListener("scroll", function () {
        t && e && (n._rect = t.getBoundingClientRect())
      }), "colors" in n._config && n.addControlBox()
    })
  }, e.resizeCanvas = function () {
    if (this._cEl) {
      var t = window.getComputedStyle(this._pEl).getPropertyValue("padding-left"),
        e = window.getComputedStyle(this._pEl).getPropertyValue("padding-right"),
        n = this._pEl.offsetWidth - parseFloat(t) - parseFloat(e);
      this._cEl.setAttribute("width", n + "px");
      var i = window.getComputedStyle(this._pEl).getPropertyValue("padding-top"),
        o = window.getComputedStyle(this._pEl).getPropertyValue("padding-bottom"),
        a = this._pEl.offsetHeight - parseFloat(i) - parseFloat(o);
      this._cEl.setAttribute("height", a + "px")
    }
  }, e.draw = function (t, e) {
    this._context.strokeStyle = this._penColor, this._context.lineWidth = this._brushSize, "square" == this._lineCap && (this._context.lineWidth = 2 * this._brushSize), this._context.lineJoin = "round", this._context.lineCap = this._lineCap, this._context.beginPath(), this._context.moveTo(this._startPoint.x, this._startPoint.y), this._context.lineTo(t, e), this._context.stroke(), this._context.closePath(), this._startPoint = {
      x: t,
      y: e
    }
  }, e.getCurrentLocation = function (t) {
    var e, n;
    if (t) return "touches" in t ? (e = t.touches[0].clientX, n = t.touches[0].clientY) : (e = t.clientX, n = t.clientY), {
      x: e,
      y: n
    }
  }, e.drawStart = function (t) {
    var e = this.getCurrentLocation(t);
    this._drawFlag = !0, this._startPoint.x = e.x - this._rect.left, this._startPoint.y = e.y - this._rect.top, t.stopPropagation()
  }, e.drawContinue = function (t) {
    if (this._drawFlag) {
      var e = this.getCurrentLocation(t),
        n = e.x - this._rect.left,
        i = e.y - this._rect.top;
      this._cEl.getContext && this.draw(n, i), t.cancelable && t.preventDefault(), t.stopPropagation()
    }
  }, e.drawStop = function (t) {
    this._drawFlag = !1, t.stopPropagation()
  }, e.isEmpty = function () {
    var t = this._cEl.getContext("2d");
    return !new Uint32Array(t.getImageData(0, 0, this._cEl.width, this._cEl.height).data.buffer).some(function (t) {
      return 0 !== t
    })
  }, e.clear = function () {
    this._cEl.getContext("2d").clearRect(0, 0, this._cEl.width, this._cEl.height)
  }, e.addStyle = function () {
    var t = document.createElement("style");
    t.textContent = "\n        canvas{\n            background: " + this._config.backgroundColor + '\n        }\n        #kpad_control_box{\n            position: absolute;\n            top: 0px;\n            width:100%;\n            display: grid;\n            grid-template-columns: 2fr 2fr 1fr;\n        }\n\n        #kpad_control_box button{\n            margin: 5px;\n            border: none;\n            width: 40px;\n            height: 40px;\n        }\n\n        .kpad-color-button{\n            border-radius: 50%;\n        }\n\n        .kpad-clear-button{\n            background-image: url(\'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="48" height="48" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24" style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);"><path d="M16.24 3.56l4.95 4.94c.78.79.78 2.05 0 2.84L12 20.53a4.008 4.008 0 0 1-5.66 0L2.81 17c-.78-.79-.78-2.05 0-2.84l10.6-10.6c.79-.78 2.05-.78 2.83 0M4.22 15.58l3.54 3.53c.78.79 2.04.79 2.83 0l3.53-3.53l-4.95-4.95l-4.95 4.95z" fill="currentColor"/></svg>\');\n            background-repeat: no-repeat;\n            background-position: center;\n            background-color: ' + this._config.backgroundColor + ";\n        }\n\n        #kpad_delete_box{\n            text-align:right;\n        }\n        ", document.querySelector("body").appendChild(t)
  }, e.addControlBox = function () {
    this.addStyle();
    var t = document.createElement("div");
    t.id = "kpad_control_box", document.querySelector("body").appendChild(t), this.addColorBox(t), this.addSizeBox(t), this.addDeleteBox(t)
  }, e.addColorBox = function (t) {
    var e = this,
      n = document.createElement("div");
    n.id = "kpad_color_box", t.appendChild(n), this._config.colors.forEach(function (t) {
      var i = document.createElement("button");
      i.className = "kpad-color-button", i.style.backgroundColor = t, i.addEventListener("click", function (n) {
        e._penColor = t, e._lineCap = "round"
      }), n.appendChild(i)
    });
    var i = document.createElement("button");
    i.className = "kpad-clear-button", i.addEventListener("click", function (t) {
      e._penColor = e._config.backgroundColor, e._lineCap = "square"
    }), n.appendChild(i)
  }, e.addSizeBox = function (t) {
    var e = this,
      n = document.createElement("div");
    n.id = "kpad_size_box", t.appendChild(n);
    var i = function (t) {
      var i = document.createElement("button");
      i.className = "kpad-size-button", i.textContent = t, i.addEventListener("click", function (n) {
        "+" == t ? e._brushSize += e._brushSizeIncreement : e._brushSize -= e._brushSizeIncreement;
        var i = parseInt(e._brushSize / e._brushSizeIncreement);
        1 === (i = i <= 0 ? 1 : i) && (e._brushSize = e._brushSizeIncreement), document.querySelector(".kpad-size-label").textContent = i
      }), n.appendChild(i)
    };
    i("+");
    var o = document.createElement("span");
    o.className = "kpad-size-label", n.appendChild(o), o.textContent = e._brushSize, e._brushSize *= e._brushSizeIncreement, i("-")
  }, e.addDeleteBox = function (t) {
    var e = this,
      n = document.createElement("div");
    n.id = "kpad_delete_box", t.appendChild(n);
    var i = document.createElement("button");
    i.className = "kpad-clear-all-button", i.textContent = "New", i.addEventListener("click", function (t) {
      return e.clear()
    }), n.appendChild(i)
  }, t
}();